// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/http;

public type ManyEpisodesObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type AudioFeaturesObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: skip-users-playback-to-previous-track
public type SkipUsersPlaybackToPreviousTrackQueries record {
    string device_id?;
};

# Represents the Queries record for the operation: get-multiple-audiobooks
public type GetMultipleAudiobooksQueries record {
    string market?;
    string ids;
};

# Represents the Queries record for the operation: check-if-user-follows-playlist
public type CheckIfUserFollowsPlaylistQueries record {
    string ids?;
};

public type ShowObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: remove-shows-user
public type RemoveShowsUserQueries record {
    string market?;
    string ids;
};

public type PagedCategoriesObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: check-users-saved-episodes
public type CheckUsersSavedEpisodesQueries record {
    string ids;
};

# Represents the Queries record for the operation: check-users-saved-audiobooks
public type CheckUsersSavedAudiobooksQueries record {
    string ids;
};

public type PagingSimplifiedEpisodeObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

public type MeEpisodesBody1 record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingPlaylistObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PlaylistSnapshotIdObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type ManySimplifiedShowsObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PrivateUserObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingSimplifiedTrackObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingSimplifiedAudiobookObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PlayerPlayBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingSavedEpisodeObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type TrackObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-users-saved-albums
public type GetUsersSavedAlbumsQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type Tempo record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: remove-audiobooks-user
public type RemoveAudiobooksUserQueries record {
    string ids;
};

public type PlaylistsPlaylistIdBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: skip-users-playback-to-next-track
public type SkipUsersPlaybackToNextTrackQueries record {
    string device_id?;
};

# Represents the Queries record for the operation: get-users-saved-episodes
public type GetUsersSavedEpisodesQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: get-a-shows-episodes
public type GetAShowsEpisodesQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PlaylistObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type ManyDevicesObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type Key record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type CursorPagedArtistsObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-users-saved-tracks
public type GetUsersSavedTracksQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PagingSavedAlbumObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-an-artists-top-tracks
public type GetAnArtistsTopTracksQueries record {
    string market?;
};

public type MeFollowingBody1 record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type EpisodeObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-an-album
public type GetAnAlbumQueries record {
    string market?;
};

# Represents the Queries record for the operation: remove-albums-user
public type RemoveAlbumsUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: set-repeat-mode-on-users-playback
public type SetRepeatModeOnUsersPlaybackQueries record {
    string device_id?;
    string state;
};

public type PlaylistIdTracksBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-list-users-playlists
public type GetListUsersPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type ManyAudioFeaturesObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-followed
public type GetFollowedQueries record {
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string after?;
    "artist" 'type;
};

# Represents the Queries record for the operation: search
public type SearchQueries record {
    string market?;
    string q;
    @constraint:Int {minValue: 0, maxValue: 1000}
    int offset = 0;
    "audio" include_external?;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    ("album"|"artist"|"playlist"|"track"|"show"|"episode"|"audiobook")[] 'type;
};

public type RecommendationsObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingPlaylistTrackObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-users-saved-audiobooks
public type GetUsersSavedAudiobooksQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PagingArtistOrTrackObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type ImageObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-an-audiobook
public type GetAnAudiobookQueries record {
    string market?;
};

# Represents the Queries record for the operation: get-new-releases
public type GetNewReleasesQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PublicUserObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: save-albums-user
public type SaveAlbumsUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: add-to-queue
public type AddToQueueQueries record {
    string device_id?;
    string uri;
};

public type MeAlbumsBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: check-users-saved-shows
public type CheckUsersSavedShowsQueries record {
    string ids;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Represents the Queries record for the operation: check-current-user-follows
public type CheckCurrentUserFollowsQueries record {
    string ids;
    "artist"|"user" 'type;
};

# Represents the Queries record for the operation: get-track
public type GetTrackQueries record {
    string market?;
};

# Represents the Queries record for the operation: get-multiple-artists
public type GetMultipleArtistsQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-multiple-shows
public type GetMultipleShowsQueries record {
    string market?;
    string ids;
};

public type ManyAudiobooksObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PlaylistIdFollowersBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type QueueObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type MeTracksBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-an-albums-tracks
public type GetAnAlbumsTracksQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: remove-tracks-user
public type RemoveTracksUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-a-list-of-current-users-playlists
public type GetAListOfCurrentUsersPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PagedAlbumsObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-an-artists-albums
public type GetAnArtistsAlbumsQueries record {
    string market?;
    int offset = 0;
    string include_groups?;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type ManyAlbumsObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type MarketsResponse record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: check-users-saved-albums
public type CheckUsersSavedAlbumsQueries record {
    string ids;
};

# Represents the Queries record for the operation: save-episodes-user
public type SaveEpisodesUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-playlists-tracks
public type GetPlaylistsTracksQueries record {
    string market?;
    string additional_types?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string fields?;
};

public type PagingFeaturedPlaylistObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: follow-artists-users
public type FollowArtistsUsersQueries record {
    string ids;
    "artist"|"user" 'type;
};

# Represents the Queries record for the operation: get-audiobook-chapters
public type GetAudiobookChaptersQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: toggle-shuffle-for-users-playback
public type ToggleShuffleForUsersPlaybackQueries record {
    string device_id?;
    boolean state;
};

public type ArtistObjects record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: reorder-or-replace-playlists-tracks
public type ReorderOrReplacePlaylistsTracksQueries record {
    string uris?;
};

public type ManyGenresObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type ManyChaptersObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type MePlayerBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-recommendations
public type GetRecommendationsQueries record {
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_instrumentalness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_speechiness?;
    @constraint:Int {minValue: 0, maxValue: 1}
    int min_mode?;
    int target_duration_ms?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_valence?;
    @constraint:Int {minValue: 0, maxValue: 100}
    int min_popularity?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_danceability?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_energy?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_energy?;
    decimal target_loudness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_liveness?;
    @constraint:Int {minValue: 0, maxValue: 1}
    int max_mode?;
    decimal max_tempo?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_valence?;
    @constraint:Int {minValue: 0, maxValue: 11}
    int max_key?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_acousticness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_acousticness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_energy?;
    decimal target_tempo?;
    string seed_tracks;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_liveness?;
    @constraint:Int {minValue: 1, maxValue: 100}
    int 'limit = 20;
    int max_duration_ms?;
    int min_duration_ms?;
    string seed_artists;
    @constraint:Int {minValue: 0, maxValue: 11}
    int min_key?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_danceability?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_liveness?;
    int max_time_signature?;
    int target_time_signature?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_acousticness?;
    decimal min_loudness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_valence?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_instrumentalness?;
    @constraint:Int {minValue: 0, maxValue: 100}
    int max_popularity?;
    @constraint:Int {minValue: 0, maxValue: 1}
    int target_mode?;
    decimal max_loudness?;
    @constraint:Int {maxValue: 11}
    int min_time_signature?;
    string market?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_instrumentalness?;
    decimal min_tempo?;
    @constraint:Int {minValue: 0, maxValue: 11}
    int target_key?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_danceability?;
    @constraint:Int {minValue: 0, maxValue: 100}
    int target_popularity?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_speechiness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_speechiness?;
    string seed_genres;
};

# Represents the Queries record for the operation: pause-a-users-playback
public type PauseAUsersPlaybackQueries record {
    string device_id?;
};

public type ArtistObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: save-audiobooks-user
public type SaveAudiobooksUserQueries record {
    string ids;
};

public type MeAlbumsBody1 record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-a-show
public type GetAShowQueries record {
    string market?;
};

public type PagingSimplifiedChapterObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-an-episode
public type GetAnEpisodeQueries record {
    string market?;
};

# Represents the Queries record for the operation: get-several-chapters
public type GetSeveralChaptersQueries record {
    string market?;
    string ids;
};

# Represents the Queries record for the operation: get-a-chapter
public type GetAChapterQueries record {
    string market?;
};

public type SearchItemsObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type CurrentlyPlayingContextObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingArtistDiscographyAlbumObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type Loudness record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type MeTracksBody1 record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: unfollow-artists-users
public type UnfollowArtistsUsersQueries record {
    string ids;
    "artist"|"user" 'type;
};

public type ManyTrackObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type ChapterObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingSavedTrackObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type UserIdPlaylistsBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-several-audio-features
public type GetSeveralAudioFeaturesQueries record {
    string ids;
};

public type PlaylistIdTracksBody1 record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-a-categories-playlists
public type GetACategoriesPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PlaylistIdTracksBody2 record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-users-top-artists-and-tracks
public type GetUsersTopArtistsAndTracksQueries record {
    int offset = 0;
    string time_range = "medium_term";
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://accounts.spotify.com/api/token";
|};

public type CursorPagingPlayHistoryObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type AudioAnalysisObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-users-saved-shows
public type GetUsersSavedShowsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type CategoryObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type PagingSavedShowObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

public type MeEpisodesBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-multiple-albums
public type GetMultipleAlbumsQueries record {
    string market?;
    string ids;
};

# Represents the Queries record for the operation: remove-episodes-user
public type RemoveEpisodesUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-several-tracks
public type GetSeveralTracksQueries record {
    string market?;
    string ids;
};

public type Mode record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-categories
public type GetCategoriesQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string locale?;
};

# Represents the Queries record for the operation: get-playlist
public type GetPlaylistQueries record {
    string market?;
    string additional_types?;
    string fields?;
};

public type AudiobookObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: check-users-saved-tracks
public type CheckUsersSavedTracksQueries record {
    string ids;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type MeFollowingBody record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-recently-played
public type GetRecentlyPlayedQueries record {
    int before?;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    int after?;
};

# Represents the Queries record for the operation: save-shows-user
public type SaveShowsUserQueries record {
    string ids;
};

public type TimeSignature record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: start-a-users-playback
public type StartAUsersPlaybackQueries record {
    string device_id?;
};

# Represents the Queries record for the operation: get-information-about-the-users-current-playback
public type GetInformationAboutTheUsersCurrentPlaybackQueries record {
    string market?;
    string additional_types?;
};

# Represents the Queries record for the operation: get-featured-playlists
public type GetFeaturedPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string locale?;
};

# Represents the Queries record for the operation: save-tracks-user
public type SaveTracksUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: add-tracks-to-playlist
public type AddTracksToPlaylistQueries record {
    string uris?;
    int position?;
};

# Represents the Queries record for the operation: set-volume-for-users-playback
public type SetVolumeForUsersPlaybackQueries record {
    string device_id?;
    int volume_percent;
};

# Represents the Queries record for the operation: seek-to-position-in-currently-playing-track
public type SeekToPositionInCurrentlyPlayingTrackQueries record {
    int position_ms;
    string device_id?;
};

# Represents the Queries record for the operation: get-a-category
public type GetACategoryQueries record {
    string locale?;
};

# Represents the Queries record for the operation: get-the-users-currently-playing-track
public type GetTheUsersCurrentlyPlayingTrackQueries record {
    string market?;
    string additional_types?;
};

public type AlbumObject record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-multiple-episodes
public type GetMultipleEpisodesQueries record {
    string market?;
    string ids;
};
