// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

# Represents the Queries record for the operation: skip-users-playback-to-previous-track
public type SkipUsersPlaybackToPreviousTrackQueries record {
    string device_id?;
};

public type ShowBase record {
    # A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    string[] available_markets;
    # The copyright statements of the show.
    CopyrightObject[] copyrights;
    # A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    string description;
    # A description of the show. This field may contain HTML tags.
    string html_description;
    # Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
    boolean explicit;
    # External URLs for this show.
    ExternalUrlObject external_urls;
    # A link to the Web API endpoint providing full details of the show.
    string href;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
    string id;
    # The cover art for the show in various sizes, widest first.
    ImageObject[] images;
    # True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
    boolean is_externally_hosted;
    # A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
    string[] languages;
    # The media type of the show.
    string media_type;
    # The name of the episode.
    string name;
    # The publisher of the show.
    string publisher;
    # The object type.
    "show" 'type;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
    string uri;
    # The total number of episodes in the show.
    int total_episodes;
};

# Represents the Queries record for the operation: check-if-user-follows-playlist
public type CheckIfUserFollowsPlaylistQueries record {
    string ids?;
};

# Represents the Queries record for the operation: remove-shows-user
public type RemoveShowsUserQueries record {
    string market?;
    string ids;
};

public type PagingSimplifiedEpisodeObject record {
    *PagingObject;
    SimplifiedEpisodeObject[] items?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

public type PagingSimplifiedTrackObject record {
    *PagingObject;
    SimplifiedTrackObject[] items?;
};

public type TrackObject record {
    # The album on which the track appears. The album object includes a link in `href` to full information about the album.
    SimplifiedAlbumObject album?;
    # The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
    SimplifiedArtistObject[] artists?;
    # A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    string[] available_markets?;
    # The disc number (usually `1` unless the album consists of more than one disc).
    int disc_number?;
    # The track length in milliseconds.
    int duration_ms?;
    # Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
    boolean explicit?;
    # Known external IDs for the track.
    ExternalIdObject external_ids?;
    # Known external URLs for this track.
    ExternalUrlObject external_urls?;
    # A link to the Web API endpoint providing full details of the track.
    string href?;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
    string id?;
    # Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
    boolean is_playable?;
    # Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.
    record {} linked_from?;
    # Included in the response when a content restriction is applied.
    TrackRestrictionObject restrictions?;
    # The name of the track.
    string name?;
    # The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._
    int popularity?;
    # A link to a 30 second preview (MP3 format) of the track. Can be `null`
    string? preview_url?;
    # The number of the track. If an album has several discs, the track number is the number on the specified disc.
    int track_number?;
    # The object type: "track".
    "track" 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
    string uri?;
    # Whether or not the track is from a local file.
    boolean is_local?;
};

public type PagingSavedEpisodeObject record {
    *PagingObject;
    SavedEpisodeObject[] items?;
};

public type CursorPagingSimplifiedArtistObject record {
    *CursorPagingObject;
    ArtistObject[] items?;
};

# Represents the Queries record for the operation: get-users-saved-albums
public type GetUsersSavedAlbumsQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
public type Tempo float;

# Represents the Queries record for the operation: skip-users-playback-to-next-track
public type SkipUsersPlaybackToNextTrackQueries record {
    string device_id?;
};

public type SavedEpisodeObject record {
    # The date and time the episode was saved.
    # Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
    string added_at?;
    # Information about the episode.
    EpisodeObject episode?;
};

# The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
@constraint:Int {minValue: -1, maxValue: 11}
public type Key int;

# Represents the Queries record for the operation: get-users-saved-tracks
public type GetUsersSavedTracksQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PlaylistTrackObject record {
    # The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._
    string added_at?;
    # The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._
    PlaylistUserObject added_by?;
    # Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.
    boolean is_local?;
    # Information about the track or episode.
    TrackObject|EpisodeObject track?;
};

public type SimplifiedArtistObject record {
    # Known external URLs for this artist.
    ExternalUrlObject external_urls?;
    # A link to the Web API endpoint providing full details of the artist.
    string href?;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
    string id?;
    # The name of the artist.
    string name?;
    # The object type.
    "artist" 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
    string uri?;
};

public type PagingSavedAlbumObject record {
    *PagingObject;
    SavedAlbumObject[] items?;
};

public type EpisodeObject record {
    *EpisodeBase;
    # The show on which the episode belongs.
    SimplifiedShowObject show;
};

# Represents the Queries record for the operation: get-an-album
public type GetAnAlbumQueries record {
    string market?;
};

public type ArtistDiscographyAlbumObject record {
    *SimplifiedAlbumObject;
    # This field describes the relationship between the artist and the album.
    "album"|"single"|"compilation"|"appears_on" album_group;
};

public type FollowersObject record {
    # This will always be set to null, as the Web API does not support it at the moment.
    string? href?;
    # The total number of followers.
    int total?;
};

public type PagingSimplifiedShowObject record {
    *PagingObject;
    SimplifiedShowObject[] items?;
};

public type CopyrightObject record {
    # The copyright text for this content.
    string text?;
    # The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.
    string 'type?;
};

# Represents the Queries record for the operation: get-followed
public type GetFollowedQueries record {
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string after?;
    "artist" 'type;
};

public type PagingPlaylistTrackObject record {
    *PagingObject;
    PlaylistTrackObject[] items?;
};

public type RecommendationsObject record {
    # An array of recommendation seed objects.
    RecommendationSeedObject[] seeds;
    # An array of track object (simplified) ordered according to the parameters supplied.
    TrackObject[] tracks;
};

public type EpisodeRestrictionObject record {
    # The reason for the restriction. Supported values:
    # - `market` - The content item is not available in the given market.
    # - `product` - The content item is not available for the user's subscription type.
    # - `explicit` - The content item is explicit and the user's account is set to not play explicit content.
    # 
    # Additional reasons may be added in the future.
    # **Note**: If you use this field, make sure that your application safely handles unknown values.
    string reason?;
};

public type SimplifiedTrackObject record {
    # The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
    SimplifiedArtistObject[] artists?;
    # A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    string[] available_markets?;
    # The disc number (usually `1` unless the album consists of more than one disc).
    int disc_number?;
    # The track length in milliseconds.
    int duration_ms?;
    # Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
    boolean explicit?;
    # External URLs for this track.
    ExternalUrlObject external_urls?;
    # A link to the Web API endpoint providing full details of the track.
    string href?;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
    string id?;
    # Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
    boolean is_playable?;
    # Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.
    LinkedTrackObject linked_from?;
    # Included in the response when a content restriction is applied.
    TrackRestrictionObject restrictions?;
    # The name of the track.
    string name?;
    # A URL to a 30 second preview (MP3 format) of the track.
    string? preview_url?;
    # The number of the track. If an album has several discs, the track number is the number on the specified disc.
    int track_number?;
    # The object type: "track".
    string 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
    string uri?;
    # Whether or not the track is from a local file.
    boolean is_local?;
};

# Represents the Queries record for the operation: get-an-audiobook
public type GetAnAudiobookQueries record {
    string market?;
};

# Represents the Queries record for the operation: get-new-releases
public type GetNewReleasesQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: save-albums-user
public type SaveAlbumsUserQueries record {
    string ids;
};

public type playlist_id_tracks_body_1 record {
    # A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`<br/>A maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._
    string[] uris?;
    # The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"], "position": 3}`
    int position?;
};

public type playlist_id_tracks_body_2 record {
    # An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.
    # For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
    playlistsplaylist_idtracks_tracks[] tracks;
    # The playlist's snapshot ID against which you want to make the changes.
    # The API will validate that the specified items exist and in the specified positions and make the changes,
    # even if more recent changes have been made to the playlist.
    string snapshot_id?;
};

public type ExplicitContentSettingsObject record {
    # When `true`, indicates that explicit content should not be played.
    boolean filter_enabled?;
    # When `true`, indicates that the explicit content setting is locked and can't be changed by the user.
    boolean filter_locked?;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Represents the Queries record for the operation: check-current-user-follows
public type CheckCurrentUserFollowsQueries record {
    string ids;
    "artist"|"user" 'type;
};

public type player_play_body record {
    # Optional. Spotify URI of the context to play.
    # Valid contexts are albums, artists & playlists.
    # `{context_uri:"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}`
    record {} context_uri?;
    # Optional. A JSON array of the Spotify track URIs to play.
    # For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}`
    string[] uris?;
    # Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object
    # "position" is zero based and can’t be negative. Example: `"offset": {"position": 5}`
    # "uri" is a string representing the uri of the item to start at. Example: `"offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}`
    record {} offset?;
    # integer
    record {} position_ms?;
};

# Represents the Queries record for the operation: get-track
public type GetTrackQueries record {
    string market?;
};

public type ContextObject record {
    # The object type, e.g. "artist", "playlist", "album", "show".
    string 'type?;
    # A link to the Web API endpoint providing full details of the track.
    string href?;
    # External URLs for this context.
    ExternalUrlObject external_urls?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.
    string uri?;
};

# Represents the Queries record for the operation: follow-artists-users
public type FollowArtistsUsersQueries record {
    string ids;
    "artist"|"user" 'type;
};

public type me_tracks_body record {
    # A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids?;
};

# Represents the Queries record for the operation: get-audiobook-chapters
public type GetAudiobookChaptersQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: toggle-shuffle-for-users-playback
public type ToggleShuffleForUsersPlaybackQueries record {
    string device_id?;
    boolean state;
};

# Represents the Queries record for the operation: reorder-or-replace-playlists-tracks
public type ReorderOrReplacePlaylistsTracksQueries record {
    string uris?;
};

public type SimplifiedAudiobookObject record {
    *AudiobookBase;
};

# Represents the Queries record for the operation: get-recommendations
public type GetRecommendationsQueries record {
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_instrumentalness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_speechiness?;
    @constraint:Int {minValue: 0, maxValue: 1}
    int min_mode?;
    int target_duration_ms?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_valence?;
    @constraint:Int {minValue: 0, maxValue: 100}
    int min_popularity?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_danceability?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_energy?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_energy?;
    decimal target_loudness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_liveness?;
    @constraint:Int {minValue: 0, maxValue: 1}
    int max_mode?;
    decimal max_tempo?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_valence?;
    @constraint:Int {minValue: 0, maxValue: 11}
    int max_key?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_acousticness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_acousticness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_energy?;
    decimal target_tempo?;
    string seed_tracks;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_liveness?;
    @constraint:Int {minValue: 1, maxValue: 100}
    int 'limit = 20;
    int max_duration_ms?;
    int min_duration_ms?;
    string seed_artists;
    @constraint:Int {minValue: 0, maxValue: 11}
    int min_key?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_danceability?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_liveness?;
    int max_time_signature?;
    int target_time_signature?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_acousticness?;
    decimal min_loudness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_valence?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal target_instrumentalness?;
    @constraint:Int {minValue: 0, maxValue: 100}
    int max_popularity?;
    @constraint:Int {minValue: 0, maxValue: 1}
    int target_mode?;
    decimal max_loudness?;
    @constraint:Int {maxValue: 11}
    int min_time_signature?;
    string market?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_instrumentalness?;
    decimal min_tempo?;
    @constraint:Int {minValue: 0, maxValue: 11}
    int target_key?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_danceability?;
    @constraint:Int {minValue: 0, maxValue: 100}
    int target_popularity?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal min_speechiness?;
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal max_speechiness?;
    string seed_genres;
};

# Represents the Queries record for the operation: save-audiobooks-user
public type SaveAudiobooksUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-several-chapters
public type GetSeveralChaptersQueries record {
    string market?;
    string ids;
};

# Represents the Queries record for the operation: get-a-chapter
public type GetAChapterQueries record {
    string market?;
};

# The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
public type Loudness float;

public type LinkedTrackObject record {
    # Known external URLs for this track.
    ExternalUrlObject external_urls?;
    # A link to the Web API endpoint providing full details of the track.
    string href?;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
    string id?;
    # The object type: "track".
    string 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
    string uri?;
};

public type me_albums_body_1 record {
    # A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids?;
};

public type ChapterObject record {
    *ChapterBase;
    # The audiobook for which the chapter belongs.
    SimplifiedAudiobookObject audiobook;
};

public type PagingSavedTrackObject record {
    *PagingObject;
    SavedTrackObject[] items?;
};

# Represents the Queries record for the operation: get-several-audio-features
public type GetSeveralAudioFeaturesQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-users-top-artists-and-tracks
public type GetUsersTopArtistsAndTracksQueries record {
    int offset = 0;
    string time_range = "medium_term";
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://accounts.spotify.com/api/token";
|};

public type CursorPagingPlayHistoryObject record {
    *CursorPagingObject;
    PlayHistoryObject[] items?;
};

public type ChapterRestrictionObject record {
    # The reason for the restriction. Supported values:
    # - `market` - The content item is not available in the given market.
    # - `product` - The content item is not available for the user's subscription type.
    # - `explicit` - The content item is explicit and the user's account is set to not play explicit content.
    # - `payment_required` - Payment is required to play the content item.
    # 
    # Additional reasons may be added in the future.
    # **Note**: If you use this field, make sure that your application safely handles unknown values.
    string reason?;
};

# Represents the Queries record for the operation: get-users-saved-shows
public type GetUsersSavedShowsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PagingTrackObject record {
    *PagingObject;
    TrackObject[] items?;
};

public type PagingSavedShowObject record {
    *PagingObject;
    SavedShowObject[] items?;
};

# Represents the Queries record for the operation: get-playlist
public type GetPlaylistQueries record {
    string market?;
    string additional_types?;
    string fields?;
};

public type playlistsplaylist_idtracks_tracks record {
    # Spotify URI
    string uri?;
};

# An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of "3/4", to "7/4".
@constraint:Int {minValue: 3, maxValue: 7}
public type TimeSignature int;

public type SavedAlbumObject record {
    # The date and time the album was saved
    # Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
    # If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
    string added_at?;
    # Information about the album.
    AlbumObject album?;
};

# Represents the Queries record for the operation: save-tracks-user
public type SaveTracksUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: add-tracks-to-playlist
public type AddTracksToPlaylistQueries record {
    string uris?;
    int position?;
};

# Represents the Queries record for the operation: set-volume-for-users-playback
public type SetVolumeForUsersPlaybackQueries record {
    string device_id?;
    int volume_percent;
};

# Represents the Queries record for the operation: get-the-users-currently-playing-track
public type GetTheUsersCurrentlyPlayingTrackQueries record {
    string market?;
    string additional_types?;
};

public type ResumePointObject record {
    # Whether or not the episode has been fully played by the user.
    boolean fully_played?;
    # The user's most recent position in the episode in milliseconds.
    int resume_position_ms?;
};

# Represents the Queries record for the operation: get-multiple-episodes
public type GetMultipleEpisodesQueries record {
    string market?;
    string ids;
};

public type PagingSimplifiedAlbumObject record {
    *PagingObject;
    SimplifiedAlbumObject[] items?;
};

public type AudioFeaturesObject record {
    # A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
    @constraint:Float {minValue: 0.0, maxValue: 1.0}
    float acousticness?;
    # A URL to access the full audio analysis of this track. An access token is required to access this data.
    string analysis_url?;
    # Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
    float danceability?;
    # The duration of the track in milliseconds.
    int duration_ms?;
    # Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
    float energy?;
    # The Spotify ID for the track.
    string id?;
    # Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
    float instrumentalness?;
    Key 'key?;
    # Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
    float liveness?;
    Loudness loudness?;
    Mode mode?;
    # Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
    float speechiness?;
    Tempo tempo?;
    TimeSignature time_signature?;
    # A link to the Web API endpoint providing full details of the track.
    string track_href?;
    # The object type.
    "audio_features" 'type?;
    # The Spotify URI for the track.
    string uri?;
    # A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
    @constraint:Float {minValue: 0, maxValue: 1}
    float valence?;
};

public type playlist_id_followers_body record {
    # Defaults to `true`. If `true` the playlist will be included in user's public playlists (added to profile), if `false` it will remain private. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
    boolean 'public?;
};

public type me_episodes_body record {
    # A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids?;
};

public type ExternalUrlObject record {
    # The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.
    string spotify?;
};

# Represents the Queries record for the operation: get-multiple-audiobooks
public type GetMultipleAudiobooksQueries record {
    string market?;
    string ids;
};

public type SimplifiedAlbumObject record {
    *AlbumBase;
    # The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
    SimplifiedArtistObject[] artists;
};

public type me_following_body record {
    # A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).
    # For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids;
};

public type ShowObject record {
    *ShowBase;
    # The episodes of the show.
    PagingSimplifiedEpisodeObject episodes;
};

# Represents the Queries record for the operation: check-users-saved-episodes
public type CheckUsersSavedEpisodesQueries record {
    string ids;
};

public type SimplifiedChapterObject record {
    *ChapterBase;
};

public type AudiobookBase record {
    # The author(s) for the audiobook.
    AuthorObject[] authors;
    # A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    string[] available_markets;
    # The copyright statements of the audiobook.
    CopyrightObject[] copyrights;
    # A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    string description;
    # A description of the audiobook. This field may contain HTML tags.
    string html_description;
    # The edition of the audiobook.
    string edition?;
    # Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).
    boolean explicit;
    # External URLs for this audiobook.
    ExternalUrlObject external_urls;
    # A link to the Web API endpoint providing full details of the audiobook.
    string href;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
    string id;
    # The cover art for the audiobook in various sizes, widest first.
    ImageObject[] images;
    # A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
    string[] languages;
    # The media type of the audiobook.
    string media_type;
    # The name of the audiobook.
    string name;
    # The narrator(s) for the audiobook.
    NarratorObject[] narrators;
    # The publisher of the audiobook.
    string publisher;
    # The object type.
    "audiobook" 'type;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
    string uri;
    # The number of chapters in this audiobook.
    int total_chapters;
};

# Represents the Queries record for the operation: check-users-saved-audiobooks
public type CheckUsersSavedAudiobooksQueries record {
    string ids;
};

public type me_player_body record {
    # A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_
    string[] device_ids;
    # **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state.
    record {} play?;
};

public type PagingPlaylistObject record {
    *PagingObject;
    SimplifiedPlaylistObject[] items?;
};

public type TimeIntervalObject record {
    # The starting point (in seconds) of the time interval.
    decimal 'start?;
    # The duration (in seconds) of the time interval.
    decimal duration?;
    # The confidence, from 0.0 to 1.0, of the reliability of the interval.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal confidence?;
};

public type PrivateUserObject record {
    # The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
    string country?;
    # The name displayed on the user's profile. `null` if not available.
    string display_name?;
    # The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
    string email?;
    # The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
    ExplicitContentSettingsObject explicit_content?;
    # Known external URLs for this user.
    ExternalUrlObject external_urls?;
    # Information about the followers of the user.
    FollowersObject followers?;
    # A link to the Web API endpoint for this user.
    string href?;
    # The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
    string id?;
    # The user's profile image.
    ImageObject[] images?;
    # The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be considered the same as "free".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
    string product?;
    # The object type: "user"
    string 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
    string uri?;
};

public type PagingSimplifiedAudiobookObject record {
    *PagingObject;
    SimplifiedAudiobookObject[] items?;
};

public type me_episodes_body_1 record {
    # A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids?;
};

# Represents the Queries record for the operation: remove-audiobooks-user
public type RemoveAudiobooksUserQueries record {
    string ids;
};

public type SectionObject record {
    # The starting point (in seconds) of the section.
    decimal 'start?;
    # The duration (in seconds) of the section.
    decimal duration?;
    # The confidence, from 0.0 to 1.0, of the reliability of the section's "designation".
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal confidence?;
    # The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
    decimal loudness?;
    # The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
    decimal tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    # The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.
    int 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    # Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
    -1|0|1 mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
};

public type playlists_playlist_id_body record {
    # The new name for the playlist, for example `"My New Playlist Title"`
    string name?;
    # The playlist's public/private status (if it should be added to the user's profile or not): `true` the playlist will be public, `false` the playlist will be private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
    boolean 'public?;
    # If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/>
    # _**Note**: You can only set `collaborative` to `true` on non-public playlists._
    boolean collaborative?;
    # Value for playlist description as displayed in Spotify Clients and in the Web API.
    string description?;
};

# Represents the Queries record for the operation: get-users-saved-episodes
public type GetUsersSavedEpisodesQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: get-a-shows-episodes
public type GetAShowsEpisodesQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type PlaylistObject record {
    # `true` if the owner allows other users to modify the playlist.
    boolean collaborative?;
    # The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
    string? description?;
    # Known external URLs for this playlist.
    ExternalUrlObject external_urls?;
    # Information about the followers of the playlist.
    FollowersObject followers?;
    # A link to the Web API endpoint providing full details of the playlist.
    string href?;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
    string id?;
    # Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
    ImageObject[] images?;
    # The name of the playlist.
    string name?;
    # The user who owns the playlist
    PlaylistOwnerObject owner?;
    # The playlist's public/private status (if it is added to the user's profile): `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
    boolean 'public?;
    # The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    string snapshot_id?;
    # The tracks of the playlist.
    PagingPlaylistTrackObject tracks?;
    # The object type: "playlist"
    string 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
    string uri?;
};

public type me_tracks_body_1 record {
    # A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids?;
};

# Represents the Queries record for the operation: get-an-artists-top-tracks
public type GetAnArtistsTopTracksQueries record {
    string market?;
};

# Represents the Queries record for the operation: remove-albums-user
public type RemoveAlbumsUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: set-repeat-mode-on-users-playback
public type SetRepeatModeOnUsersPlaybackQueries record {
    string device_id?;
    string state;
};

public type CursorObject record {
    # The cursor to use as key to find the next page of items.
    string after?;
    # The cursor to use as key to find the previous page of items.
    string before?;
};

# Represents the Queries record for the operation: get-list-users-playlists
public type GetListUsersPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type NarratorObject record {
    # The name of the Narrator.
    string name?;
};

public type PlaylistOwnerObject record {
    *PlaylistUserObject;
    # The name displayed on the user's profile. `null` if not available.
    string? display_name?;
};

# Represents the Queries record for the operation: search
public type SearchQueries record {
    string market?;
    string q;
    @constraint:Int {minValue: 0, maxValue: 1000}
    int offset = 0;
    "audio" include_external?;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    ("album"|"artist"|"playlist"|"track"|"show"|"episode"|"audiobook")[] 'type;
};

# Represents the Queries record for the operation: get-users-saved-audiobooks
public type GetUsersSavedAudiobooksQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type SegmentObject record {
    # The starting point (in seconds) of the segment.
    decimal 'start?;
    # The duration (in seconds) of the segment.
    decimal duration?;
    # The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal confidence?;
    # The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the "attack" of the segment.
    decimal loudness_start?;
    # The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the "attack" of the segment.
    decimal loudness_max?;
    # The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the "attack" of the segment.
    decimal loudness_max_time?;
    # The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.
    decimal loudness_end?;
    # Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).
    # 
    # Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.
    # As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.
    # ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)
    SegmentObjectPitchesItemsNumber[] pitches?;
    # Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.
    # 
    # For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).
    # ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)
    # 
    # The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.
    decimal[] timbre?;
};

@constraint:Number {minValue: 0, maxValue: 1}
public type SegmentObjectPitchesItemsNumber decimal;

public type ImageObject record {
    # The source URL of the image.
    string url;
    # The image height in pixels.
    int? height;
    # The image width in pixels.
    int? width;
};

public type TrackRestrictionObject record {
    # The reason for the restriction. Supported values:
    # - `market` - The content item is not available in the given market.
    # - `product` - The content item is not available for the user's subscription type.
    # - `explicit` - The content item is explicit and the user's account is set to not play explicit content.
    # 
    # Additional reasons may be added in the future.
    # **Note**: If you use this field, make sure that your application safely handles unknown values.
    string reason?;
};

public type PublicUserObject record {
    # The name displayed on the user's profile. `null` if not available.
    string? display_name?;
    # Known public external URLs for this user.
    ExternalUrlObject external_urls?;
    # Information about the followers of this user.
    FollowersObject followers?;
    # A link to the Web API endpoint for this user.
    string href?;
    # The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
    string id?;
    # The user's profile image.
    ImageObject[] images?;
    # The object type.
    "user" 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
    string uri?;
};

public type EpisodeBase record {
    # A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
    string? audio_preview_url;
    # A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    string description;
    # A description of the episode. This field may contain HTML tags.
    string html_description;
    # The episode length in milliseconds.
    int duration_ms;
    # Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
    boolean explicit;
    # External URLs for this episode.
    ExternalUrlObject external_urls;
    # A link to the Web API endpoint providing full details of the episode.
    string href;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
    string id;
    # The cover art for the episode in various sizes, widest first.
    ImageObject[] images;
    # True if the episode is hosted outside of Spotify's CDN.
    boolean is_externally_hosted;
    # True if the episode is playable in the given market. Otherwise false.
    boolean is_playable;
    # The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.
    # 
    # # Deprecated
    @deprecated
    string language?;
    # A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
    string[] languages;
    # The name of the episode.
    string name;
    # The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
    string release_date;
    # The precision with which `release_date` value is known.
    "year"|"month"|"day" release_date_precision;
    # The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
    ResumePointObject resume_point?;
    # The object type.
    "episode" 'type;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
    string uri;
    # Included in the response when a content restriction is applied.
    EpisodeRestrictionObject restrictions?;
};

# Represents the Queries record for the operation: add-to-queue
public type AddToQueueQueries record {
    string device_id?;
    string uri;
};

public type RecommendationSeedObject record {
    # The number of tracks available after min\_\* and max\_\* filters have been applied.
    int afterFilteringSize?;
    # The number of tracks available after relinking for regional availability.
    int afterRelinkingSize?;
    # A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.
    string href?;
    # The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
    string id?;
    # The number of recommended tracks available for this seed.
    int initialPoolSize?;
    # The entity type of this seed. One of `artist`, `track` or `genre`.
    string 'type?;
};

# Represents the Queries record for the operation: check-users-saved-shows
public type CheckUsersSavedShowsQueries record {
    string ids;
};

public type SimplifiedEpisodeObject record {
    *EpisodeBase;
};

# Represents the Queries record for the operation: get-multiple-artists
public type GetMultipleArtistsQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-multiple-shows
public type GetMultipleShowsQueries record {
    string market?;
    string ids;
};

public type QueueObject record {
    # The currently playing track or episode. Can be `null`.
    TrackObject|EpisodeObject currently_playing?;
    # The tracks or episodes in the queue. Can be empty.
    (TrackObject|EpisodeObject)[] queue?;
};

# Represents the Queries record for the operation: get-an-albums-tracks
public type GetAnAlbumsTracksQueries record {
    string market?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: remove-tracks-user
public type RemoveTracksUserQueries record {
    string ids;
};

public type playlist_id_tracks_body record {
    string[] uris?;
    # The position of the first item to be reordered.
    int range_start?;
    # The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.
    int insert_before?;
    # The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.
    int range_length?;
    # The playlist's snapshot ID against which you want to make the changes.
    string snapshot_id?;
};

public type PlayHistoryObject record {
    # The track the user listened to.
    TrackObject track?;
    # The date and time the track was played.
    string played_at?;
    # The context the track was played from.
    ContextObject context?;
};

# Represents the Queries record for the operation: get-a-list-of-current-users-playlists
public type GetAListOfCurrentUsersPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

# Represents the Queries record for the operation: get-an-artists-albums
public type GetAnArtistsAlbumsQueries record {
    string market?;
    int offset = 0;
    string include_groups?;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type AlbumBase record {
    # The type of the album.
    "album"|"single"|"compilation" album_type;
    # The number of tracks in the album.
    int total_tracks;
    # The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._
    string[] available_markets;
    # Known external URLs for this album.
    ExternalUrlObject external_urls;
    # A link to the Web API endpoint providing full details of the album.
    string href;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.
    string id;
    # The cover art for the album in various sizes, widest first.
    ImageObject[] images;
    # The name of the album. In case of an album takedown, the value may be an empty string.
    string name;
    # The date the album was first released.
    string release_date;
    # The precision with which `release_date` value is known.
    "year"|"month"|"day" release_date_precision;
    # Included in the response when a content restriction is applied.
    AlbumRestrictionObject restrictions?;
    # The object type.
    "album" 'type;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.
    string uri;
};

public type AuthorObject record {
    # The name of the author.
    string name?;
};

# Represents the Queries record for the operation: check-users-saved-albums
public type CheckUsersSavedAlbumsQueries record {
    string ids;
};

public type me_albums_body record {
    # A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids?;
};

# Represents the Queries record for the operation: save-episodes-user
public type SaveEpisodesUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-playlists-tracks
public type GetPlaylistsTracksQueries record {
    string market?;
    string additional_types?;
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string fields?;
};

public type PagingFeaturedPlaylistObject record {
    # The localized message of a playlist.
    string message?;
    PagingPlaylistObject playlists?;
};

public type PagingObject record {
    # A link to the Web API endpoint returning the full result of the request
    string href;
    # The maximum number of items in the response (as set in the query or by default).
    int 'limit;
    # URL to the next page of items. ( `null` if none)
    string? next;
    # The offset of the items returned (as set in the query or by default)
    int offset;
    # URL to the previous page of items. ( `null` if none)
    string? previous;
    # The total number of items available to return.
    int total;
};

public type DisallowsObject record {
    # Interrupting playback. Optional field.
    boolean interrupting_playback?;
    # Pausing. Optional field.
    boolean pausing?;
    # Resuming. Optional field.
    boolean resuming?;
    # Seeking playback location. Optional field.
    boolean seeking?;
    # Skipping to the next context. Optional field.
    boolean skipping_next?;
    # Skipping to the previous context. Optional field.
    boolean skipping_prev?;
    # Toggling repeat context flag. Optional field.
    boolean toggling_repeat_context?;
    # Toggling shuffle flag. Optional field.
    boolean toggling_shuffle?;
    # Toggling repeat track flag. Optional field.
    boolean toggling_repeat_track?;
    # Transfering playback between devices. Optional field.
    boolean transferring_playback?;
};

public type SimplifiedPlaylistObject record {
    # `true` if the owner allows other users to modify the playlist.
    boolean collaborative?;
    # The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
    string description?;
    # Known external URLs for this playlist.
    ExternalUrlObject external_urls?;
    # A link to the Web API endpoint providing full details of the playlist.
    string href?;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
    string id?;
    # Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
    ImageObject[] images?;
    # The name of the playlist.
    string name?;
    # The user who owns the playlist
    PlaylistOwnerObject owner?;
    # The playlist's public/private status (if it is added to the user's profile): `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
    boolean 'public?;
    # The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    string snapshot_id?;
    # A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.
    PlaylistTracksRefObject tracks?;
    # The object type: "playlist"
    string 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
    string uri?;
};

public type inline_response_200_9 record {
    *PagingObject;
    (ArtistObject|TrackObject)[] items?;
};

public type me_following_body_1 record {
    # A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
    string[] ids?;
};

public type SavedTrackObject record {
    # The date and time the track was saved.
    # Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
    # If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
    string added_at?;
    # Information about the track.
    TrackObject track?;
};

public type inline_response_200_5 record {
    AudiobookObject[] audiobooks;
};

public type inline_response_200_6 record {
    ChapterObject[] chapters;
};

public type PlaylistUserObject record {
    # Known public external URLs for this user.
    ExternalUrlObject external_urls?;
    # Information about the followers of this user.
    FollowersObject followers?;
    # A link to the Web API endpoint for this user.
    string href?;
    # The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
    string id?;
    # The object type.
    "user" 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
    string uri?;
};

public type inline_response_200_7 record {
    PagingTrackObject tracks?;
    PagingArtistObject artists?;
    PagingSimplifiedAlbumObject albums?;
    PagingPlaylistObject playlists?;
    PagingSimplifiedShowObject shows?;
    PagingSimplifiedEpisodeObject episodes?;
    PagingSimplifiedAudiobookObject audiobooks?;
};

public type inline_response_200_8 record {
    string snapshot_id?;
};

# Represents the Queries record for the operation: pause-a-users-playback
public type PauseAUsersPlaybackQueries record {
    string device_id?;
};

public type ChapterBase record {
    # A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available.
    string? audio_preview_url;
    # A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    string[] available_markets?;
    # The number of the chapter
    int chapter_number;
    # A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    string description;
    # A description of the chapter. This field may contain HTML tags.
    string html_description;
    # The chapter length in milliseconds.
    int duration_ms;
    # Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown).
    boolean explicit;
    # External URLs for this chapter.
    ExternalUrlObject external_urls;
    # A link to the Web API endpoint providing full details of the chapter.
    string href;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
    string id;
    # The cover art for the chapter in various sizes, widest first.
    ImageObject[] images;
    # True if the chapter is playable in the given market. Otherwise false.
    boolean is_playable;
    # A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
    string[] languages;
    # The name of the chapter.
    string name;
    # The date the chapter was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
    string release_date;
    # The precision with which `release_date` value is known.
    "year"|"month"|"day" release_date_precision;
    # The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
    ResumePointObject resume_point?;
    # The object type.
    "episode" 'type;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
    string uri;
    # Included in the response when a content restriction is applied.
    ChapterRestrictionObject restrictions?;
};

public type ArtistObject record {
    # Known external URLs for this artist.
    ExternalUrlObject external_urls?;
    # Information about the followers of the artist.
    FollowersObject followers?;
    # A list of the genres the artist is associated with. If not yet classified, the array is empty.
    string[] genres?;
    # A link to the Web API endpoint providing full details of the artist.
    string href?;
    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
    string id?;
    # Images of the artist in various sizes, widest first.
    ImageObject[] images?;
    # The name of the artist.
    string name?;
    # The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
    int popularity?;
    # The object type.
    "artist" 'type?;
    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
    string uri?;
};

public type PagingSimplifiedChapterObject record {
    *PagingObject;
    SimplifiedChapterObject[] items?;
};

# Represents the Queries record for the operation: get-a-show
public type GetAShowQueries record {
    string market?;
};

# Represents the Queries record for the operation: get-an-episode
public type GetAnEpisodeQueries record {
    string market?;
};

public type SimplifiedShowObject record {
    *ShowBase;
};

public type PlaylistTracksRefObject record {
    # A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.
    string href?;
    # Number of tracks in the playlist.
    int total?;
};

public type inline_response_200_1 record {
    ArtistObject[] artists;
};

public type inline_response_200_2 record {
    TrackObject[] tracks;
};

public type inline_response_200_3 record {
    SimplifiedShowObject[] shows;
};

public type inline_response_200_4 record {
    EpisodeObject[] episodes;
};

public type ExternalIdObject record {
    # [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
    string isrc?;
    # [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
    string ean?;
    # [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
    string upc?;
};

public type CurrentlyPlayingContextObject record {
    # The device that is currently active.
    DeviceObject device?;
    # off, track, context
    string repeat_state?;
    # If shuffle is on or off.
    boolean shuffle_state?;
    # A Context Object. Can be `null`.
    ContextObject context?;
    # Unix Millisecond Timestamp when playback state was last changed (play, pause, skip, scrub, new song, etc.).
    int timestamp?;
    # Progress into the currently playing track or episode. Can be `null`.
    int progress_ms?;
    # If something is currently playing, return `true`.
    boolean is_playing?;
    # The currently playing track or episode. Can be `null`.
    TrackObject|EpisodeObject item?;
    # The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
    string currently_playing_type?;
    # Allows to update the user interface based on which playback actions are available within the current context.
    DisallowsObject actions?;
};

public type PagingArtistDiscographyAlbumObject record {
    *PagingObject;
    ArtistDiscographyAlbumObject[] items?;
};

public type inline_response_200_11 record {
    PagingSimplifiedAlbumObject albums;
};

public type inline_response_200_10 record {
    record {*PagingObject; CategoryObject[] items?;} categories;
};

public type inline_response_200_13 record {
    AudioFeaturesObject[] audio_features;
};

public type inline_response_200_12 record {
    CursorPagingSimplifiedArtistObject artists;
};

# Represents the Queries record for the operation: unfollow-artists-users
public type UnfollowArtistsUsersQueries record {
    string ids;
    "artist"|"user" 'type;
};

public type AudioAnalysisObject_meta record {
    # The version of the Analyzer used to analyze this track.
    string analyzer_version?;
    # The platform used to read the track's audio data.
    string platform?;
    # A detailed status code for this track. If analysis data is missing, this code may explain why.
    string detailed_status?;
    # The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
    int status_code?;
    # The Unix timestamp (in seconds) at which this track was analyzed.
    int timestamp?;
    # The amount of time taken to analyze this track.
    decimal analysis_time?;
    # The method used to read the track's audio data.
    string input_process?;
};

public type SavedShowObject record {
    # The date and time the show was saved.
    # Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
    # If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
    string added_at?;
    # Information about the show.
    SimplifiedShowObject show?;
};

public type inline_response_200_15 record {
    DeviceObject[] devices;
};

public type inline_response_200_14 record {
    string[] genres;
};

# Represents the Queries record for the operation: get-a-categories-playlists
public type GetACategoriesPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
};

public type inline_response_200_16 record {
    string[] markets?;
};

public type user_id_playlists_body record {
    # The name for the new playlist, for example `"Your Coolest Playlist"`. This name does not need to be unique; a user may have several playlists with the same name.
    string name;
    # Defaults to `true`. The playlist's public/private status (if it should be added to the user's profile or not): `true` the playlist will be public, `false` the playlist will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes). For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
    boolean 'public?;
    # Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._
    boolean collaborative?;
    # value for playlist description as displayed in Spotify Clients and in the Web API.
    string description?;
};

public type inline_response_200 record {
    AlbumObject[] albums;
};

public type AudioAnalysisObject record {
    AudioAnalysisObject_meta meta?;
    AudioAnalysisObject_track track?;
    # The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
    TimeIntervalObject[] bars?;
    # The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
    TimeIntervalObject[] beats?;
    # Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
    SectionObject[] sections?;
    # Each segment contains a roughly conisistent sound throughout its duration.
    SegmentObject[] segments?;
    # A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
    TimeIntervalObject[] tatums?;
};

public type CategoryObject record {
    # A link to the Web API endpoint returning full details of the category.
    string href;
    # The category icon, in various sizes.
    ImageObject[] icons;
    # The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.
    string id;
    # The name of the category.
    string name;
};

public type AudioAnalysisObject_track record {
    # The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
    int num_samples?;
    # Length of the track in seconds.
    decimal duration?;
    # This field will always contain the empty string.
    string sample_md5?;
    # An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
    int offset_seconds?;
    # The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
    int window_seconds?;
    # The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
    int analysis_sample_rate?;
    # The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
    int analysis_channels?;
    # The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
    decimal end_of_fade_in?;
    # The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
    decimal start_of_fade_out?;
    Loudness loudness?;
    Tempo tempo?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal tempo_confidence?;
    TimeSignature time_signature?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal time_signature_confidence?;
    Key 'key?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal key_confidence?;
    Mode mode?;
    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal mode_confidence?;
    # An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
    string codestring?;
    # A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
    decimal code_version?;
    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
    string echoprintstring?;
    # A version number for the EchoPrint format used in the echoprintstring field.
    decimal echoprint_version?;
    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    string synchstring?;
    # A version number for the Synchstring used in the synchstring field.
    decimal synch_version?;
    # A Rhythmstring for this track. The format of this string is similar to the Synchstring.
    string rhythmstring?;
    # A version number for the Rhythmstring used in the rhythmstring field.
    decimal rhythm_version?;
};

# Represents the Queries record for the operation: get-multiple-albums
public type GetMultipleAlbumsQueries record {
    string market?;
    string ids;
};

public type PagingArtistObject record {
    *PagingObject;
    ArtistObject[] items?;
};

# Represents the Queries record for the operation: remove-episodes-user
public type RemoveEpisodesUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: get-several-tracks
public type GetSeveralTracksQueries record {
    string market?;
    string ids;
};

# Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
public type Mode int;

# Represents the Queries record for the operation: get-categories
public type GetCategoriesQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string locale?;
};

public type CursorPagingObject record {
    # A link to the Web API endpoint returning the full result of the request.
    string href?;
    # The maximum number of items in the response (as set in the query or by default).
    int 'limit?;
    # URL to the next page of items. ( `null` if none)
    string next?;
    # The cursors used to find the next set of items.
    CursorObject cursors?;
    # The total number of items available to return.
    int total?;
};

public type AudiobookObject record {
    *AudiobookBase;
    # The chapters of the audiobook.
    PagingSimplifiedChapterObject chapters;
};

# Represents the Queries record for the operation: check-users-saved-tracks
public type CheckUsersSavedTracksQueries record {
    string ids;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# Represents the Queries record for the operation: get-recently-played
public type GetRecentlyPlayedQueries record {
    int before?;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    int after?;
};

# Represents the Queries record for the operation: save-shows-user
public type SaveShowsUserQueries record {
    string ids;
};

# Represents the Queries record for the operation: start-a-users-playback
public type StartAUsersPlaybackQueries record {
    string device_id?;
};

# Represents the Queries record for the operation: get-information-about-the-users-current-playback
public type GetInformationAboutTheUsersCurrentPlaybackQueries record {
    string market?;
    string additional_types?;
};

public type DeviceObject record {
    # The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and any cached `device_id` should periodically be cleared out and refetched as necessary.
    string? id?;
    # If this device is the currently active device.
    boolean is_active?;
    # If this device is currently in a private session.
    boolean is_private_session?;
    # Whether controlling this device is restricted. At present if this is "true" then no Web API commands will be accepted by this device.
    boolean is_restricted?;
    # A human-readable name for the device. Some devices have a name that the user can configure (e.g. \"Loudest speaker\") and some devices have a generic name associated with the manufacturer or device model.
    string name?;
    # Device type, such as "computer", "smartphone" or "speaker".
    string 'type?;
    # The current volume in percent.
    int? volume_percent?;
    # If this device can be used to set the volume.
    boolean supports_volume?;
};

# Represents the Queries record for the operation: get-featured-playlists
public type GetFeaturedPlaylistsQueries record {
    int offset = 0;
    @constraint:Int {minValue: 0, maxValue: 50}
    int 'limit = 20;
    string locale?;
};

# Represents the Queries record for the operation: seek-to-position-in-currently-playing-track
public type SeekToPositionInCurrentlyPlayingTrackQueries record {
    int position_ms;
    string device_id?;
};

# Represents the Queries record for the operation: get-a-category
public type GetACategoryQueries record {
    string locale?;
};

public type AlbumRestrictionObject record {
    # The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.
    # Additional reasons may be added in the future.
    "market"|"product"|"explicit" reason?;
};

public type AlbumObject record {
    *AlbumBase;
    # The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
    SimplifiedArtistObject[] artists;
    # The tracks of the album.
    PagingSimplifiedTrackObject tracks;
    # The copyright statements of the album.
    CopyrightObject[] copyrights;
    # Known external IDs for the album.
    ExternalIdObject external_ids;
    # A list of the genres the album is associated with. If not yet classified, the array is empty.
    string[] genres;
    # The label associated with the album.
    string label;
    # The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.
    int popularity;
};
